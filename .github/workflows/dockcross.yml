name: Cross-Platform Build and Test

permissions:
  contents: write

on:
    push:
        branches:
            - master
    workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        dockcross_image:
            - linux-armv5
            - linux-armv6
            - linux-armv7
            - linux-arm64
            - linux-ppc64le
            - linux-x64
            - linux-x86
            - linux-mips
            - linux-s390x
            - linux-xtensa-uclibc	
            - android-arm
            - android-arm64
            - android-x86
            - android-x86_64

    steps:
      - uses: actions/checkout@v3

      - name: install helper script
        run: |
            docker run --rm dockcross/${{ matrix.dockcross_image }} > ./dockcross
            chmod +x ./dockcross

      - name: test dockcross
        run: |
            ./dockcross bash -c "echo hello world"

      - name: createprofile
        run: |
            ./dockcross bash ./profile_script.sh

      - name: conaninstall
        run: |
            ./dockcross bash -c "conan install . --output-folder=build --build=missing -pr build"

      - name: updatecmake
        run: |
            ./dockcross bash ./update_cmake.sh

      - name: cmake
        run: |
            ./dockcross bash -c "mkdir -p build && rm -rf build/* CMakeCache.txt CMakeFiles && cd build && cmake .."

      - name: make
        run: |
            ./dockcross bash -c "cd build && make"

      - name: ctest
        run: |
            ./dockcross bash -c "cd build && ctest --output-on-failure"

      - name: version
        id: version
        # parse the VERSION from main.c
        run: echo ::set-output name=version::$(grep -oP 'VERSION = "\K[^"]+' main.c)-$(echo ${{ github.sha }} | cut -c1-7)

      - name: release
        id: release  # ID used to reference the step later
        if: github.ref == 'refs/heads/master'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.version }}
          release_name: Release ${{ steps.version.outputs.version }}
          draft: true
          prerelease: true

      - name: upload
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
            upload_url: ${{ steps.release.outputs.upload_url }}
            asset_path: build/cliffi
            asset_name: cliffi-${{ matrix.dockcross_image }}
            asset_content_type: application/zip
