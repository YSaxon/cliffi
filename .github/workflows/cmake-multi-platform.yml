name: CI

on: [push, pull_request]

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        arch: [x86, x64, arm, arm64, riscv64]
        exclude:
          - os: macos-latest
            arch: arm
          - os: macos-latest
            arch: arm64
          - os: macos-latest
            arch: riscv64
          - os: windows-latest
            arch: arm
          - os: windows-latest
            arch: arm64
          - os: windows-latest
            arch: riscv64

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Set up CMake
      uses: jwlawson/actions-setup-cmake@v1.13
      with:
        cmake-version: '3.20.x'

    - name: Install Dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y libffi-dev gcc-arm-linux-gnueabi gcc-aarch64-linux-gnu gcc-riscv64-linux-gnu
        sudo apt-get install -y qemu-user qemu-user-static qemu-system-arm qemu-system-aarch64 qemu-system-riscv64
        sudo docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

    - name: Install Dependencies (macOS)
      if: runner.os == 'macOS'
      run: brew install libffi

    - name: Install Dependencies (Windows)
      if: runner.os == 'Windows'
      run: |
        choco install -y libffi
        echo "C:\Program Files\libffi\lib" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - name: Configure CMake (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        if [ "${{ matrix.arch }}" == "x86" ]; then
          cmake -B build -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_FLAGS="-m32"
        elif [ "${{ matrix.arch }}" == "x64" ]; then
          cmake -B build -DCMAKE_BUILD_TYPE=Release
        else
          cmake -B build -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=cmake/toolchain-${{ matrix.arch }}.cmake
        fi

    - name: Configure CMake (macOS)
      if: runner.os == 'macOS'
      run: cmake -B build -DCMAKE_BUILD_TYPE=Release

    - name: Configure CMake (Windows)
      if: runner.os == 'Windows'
      run: cmake -B build -DCMAKE_BUILD_TYPE=Release

    - name: Build
      run: cmake --build build --config Release

    - name: Run Tests (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        if [ "${{ matrix.arch }}" == "x86" ] || [ "${{ matrix.arch }}" == "x64" ]; then
          cd build && ctest --output-on-failure
        elif [ "${{ matrix.arch }}" == "arm" ]; then
          cd build && qemu-arm -L /usr/arm-linux-gnueabi ctest  --output-on-failure
        elif [ "${{ matrix.arch }}" == "arm64" ]; then
          cd build && qemu-aarch64 -L /usr/aarch64-linux-gnu ctest  --output-on-failure
        elif [ "${{ matrix.arch }}" == "riscv64" ]; then
          cd build && qemu-riscv64 -L /usr/riscv64-linux-gnu ctest  --output-on-failure
        fi

    - name: Run Tests (macOS & Windows)
      if: runner.os != 'Linux'
      run: cd build && ctest --output-on-failure
