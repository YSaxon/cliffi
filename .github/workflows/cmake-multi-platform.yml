# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        arch: [x86, x64, arm, arm64, riscv64]
        exclude:
          - os: macos-latest
            arch: arm
          - os: macos-latest
            arch: arm64
          - os: macos-latest
            arch: riscv64
          - os: windows-latest
            arch: arm
          - os: windows-latest
            arch: arm64
          - os: windows-latest
            arch: riscv64
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++


    steps:
    - uses: actions/checkout@v3

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}


    - name: Install Dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y libffi-dev qemu-user-static gcc-arm-linux-gnueabi gcc-aarch64-linux-gnu gcc-riscv64-linux-gnu
        sudo docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

    - name: Install QEMU-RISCV
      if: runner.os == 'Linux' && runner.arch == 'riscv'
      run: |
        sudo apt-get install -y qemu-system-riscv64



    - name: Install Dependencies (macOS)
      if: runner.os == 'macOS'
      run: brew install libffi

    - name: Install Dependencies (Windows)
      if: runner.os == 'Windows'
      run: |
        choco install -y libffi
        echo "C:\Program Files\libffi\lib" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - name: Set up Cross-Compilation Toolchains (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        if [ "${{ matrix.arch }}" == "arm" ]; then
          echo "CC=arm-linux-gnueabi-gcc" >> $GITHUB_ENV
        elif [ "${{ matrix.arch }}" == "arm64" ]; then
          echo "CC=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
        elif [ "${{ matrix.arch }}" == "riscv64" ]; then
          echo "CC=riscv64-linux-gnu-gcc" >> $GITHUB_ENV
        fi

    - name: Configure CMake (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        if [ "${{ matrix.arch }}" == "x86" ]; then
          cmake -B build -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_FLAGS="-m32"
        elif [ "${{ matrix.arch }}" == "x64" ]; then
          cmake -B build -DCMAKE_BUILD_TYPE=Release
        elif [ "${{ matrix.arch }}" == "arm" ]; then
          cmake -B build -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=cmake/toolchain-arm.cmake
        elif [ "${{ matrix.arch }}" == "arm64" ]; then
          cmake -B build -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=cmake/toolchain-arm64.cmake
        elif [ "${{ matrix.arch }}" == "riscv64" ]; then
          cmake -B build -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=cmake/toolchain-riscv64.cmake
        fi


    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}


    - name: Run Tests (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        if [ "${{ matrix.arch }}" == "x86" ] || [ "${{ matrix.arch }}" == "x64" ]; then
          cd build && ctest -C Release
        else
          cd build && qemu-${{ matrix.arch }} -L /usr/${{ matrix.arch }}-linux-gnu ctest -C Release
        fi
    - name: Run Tests (macOS or Windows)
      if: runner.os != 'Linux'
      run: |
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        run: ctest --build-config ${{ matrix.build_type }}
